import unittest
import part2
import numpy as np
import sklearn.datasets
class MyTestCase(unittest.TestCase):


    def test_kmeans_3(self):
        X,y = sklearn.datasets.make_blobs(n_samples=300, centers=3, random_state=35)
        c_l, means = part2.k_means_clustering( X, 3,0.000001)
        self.assertEqual(c_l,[0., 2., 0., 1., 0., 0., 2., 0., 1., 1., 2., 2., 0., 0., 2., 2., 1.,
       1., 1., 0., 1., 1., 1., 2., 0., 0., 0., 2., 1., 1., 0., 1., 0., 2.,
       2., 0., 1., 1., 2., 2., 2., 1., 0., 2., 2., 1., 2., 0., 2., 1., 0.,
       0., 2., 2., 0., 1., 2., 1., 2., 2., 1., 1., 2., 1., 2., 1., 0., 1.,
       1., 2., 2., 1., 1., 1., 1., 1., 1., 1., 0., 1., 1., 0., 2., 1., 1.,
       0., 2., 2., 2., 0., 0., 1., 2., 0., 1., 0., 0., 2., 2., 2., 2., 0.,
       2., 0., 2., 2., 0., 0., 1., 0., 2., 1., 0., 0., 0., 1., 0., 2., 2.,
       2., 2., 1., 1., 2., 1., 2., 1., 0., 0., 2., 1., 2., 1., 2., 1., 0.,
       0., 2., 1., 1., 0., 0., 1., 1., 0., 1., 1., 2., 1., 1., 0., 0., 1.,
       0., 0., 2., 0., 2., 2., 1., 1., 1., 0., 2., 0., 0., 2., 1., 2., 2.,
       2., 0., 2., 1., 2., 2., 0., 2., 1., 0., 0., 2., 0., 0., 1., 2., 0.,
       0., 1., 0., 2., 0., 0., 0., 0., 0., 1., 1., 2., 0., 1., 0., 2., 1.,
       2., 2., 0., 2., 1., 2., 0., 0., 0., 0., 0., 2., 1., 2., 2., 1., 2.,
       2., 1., 2., 0., 0., 1., 0., 0., 2., 2., 0., 2., 0., 1., 1., 2., 0.,
       0., 1., 0., 1., 2., 0., 2., 2., 1., 0., 1., 2., 1., 2., 0., 2., 2.,
       1., 2., 0., 2., 1., 0., 0., 0., 2., 0., 0., 1., 2., 2., 1., 1., 2.,
       2., 1., 1., 1., 1., 1., 0., 1., 0., 1., 0., 0., 2., 0., 2., 0., 0.,
       1., 1., 2., 2., 1., 2., 0., 1., 1., 1., 1.])
        print(means)
        self.assertEqual(means.all(), np.array([[ 6.20253055, -7.98535796],[-0.69349908, -3.83286075],[-5.36633913, -4.62487197]]).all())